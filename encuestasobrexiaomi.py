# -*- coding: utf-8 -*-
"""EncuestaSobreXiaomi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-L5GMU-s6EVGRWsbxyu2bV1HMzQ4upVG
"""

#!pip install dash

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px

import pandas as pd
url = "https://raw.githubusercontent.com/sebas123456m/dashboardDash/87adf606c7a615fcc002e99b8ffc0200297b490e/Encuesta%20Sobre%20Celular%20Xiomi%20Redmi%20(1-22)%20(1).xlsx"

encuesta = pd.read_excel(url)

data = encuesta

print(data.head())

# Eliminar espacios adicionales y caracteres especiales de los nombres de las columnas
data.columns = data.columns.str.strip()

# Verificar nuevamente los nombres de las columnas
print("Nombres de las columnas después de eliminar espacios adicionales:")
print(data.columns)

data = data.rename(columns={
    'Favor indicanos tu nombre': 'Nombre',
    '¿Cuentanos a qué te dedicas?': 'Ocupación',
    '¿Cuál es tu rango de edad?': 'Rango de Edad',
    '¿Cuál es tu género?': 'Género',
    '¿Tienes un celular Xiaomi Redmi  o has tenido experiencia con él?': 'Experiencia con Xiaomi',
    'En general, ¿cómo evaluaría su calidad?': 'Calidad',
    'En general, ¿cómo puntuaría la relación calidad-precio de este producto?': 'Calidad-Precio',
    'En comparación con otros productos de la competencia que ya estén en el mercado, diría que este producto es...': 'Innovación',
    '¿Cuál es la probabilidad de que recomiende este nuevo producto a amigos, compañeros de trabajo o familiares?': 'Probabilidad de Recomendación',
    '¿Qué es lo que más le gusta de este producto?': 'Aspecto Favorito',
    '¿Qué es lo que menos le gusta de este producto?': 'Aspecto Menos Favorito',
    'A continuación, te presento las características de dos celulares del mercado: uno corresponde a la marca Redmi y otro a Huawei ¿Cuál de ellos elegirías comprar? sin conocer su precio\n\n': 'Preferencia Sin Precio',
    'A continuación, te presento las características de dos celulares del mercado: uno corresponde a la marca Redmi y otro a Huawei con su precio actual  ¿Cuál de ellos elegirías comprar?': 'Preferencia Con Precio'
})

# Análisis descriptivo
print("Resumen de datos:")
print(data.describe(include='all'))

"""***Gráficos***"""

# 1. Distribución de la Evaluación de la Calidad del Producto
calidad_counts = data['Calidad'].value_counts()
colors = ['gold', 'lightcoral', 'lightskyblue', 'yellowgreen', 'violet']

plt.figure(figsize=(8, 6))
plt.pie(calidad_counts, labels=calidad_counts.index, autopct='%1.1f%%', startangle=140, colors=colors)
plt.title('Distribución de la Evaluación de la Calidad del Producto Xiaomi')
plt.axis('equal')
plt.tight_layout()
plt.show()

# 2. Distribución de la Relación Calidad-Precio
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Calidad-Precio', palette='magma')
plt.title('Distribución de la Relación Calidad-Precio del Producto Xiaomi')
plt.xlabel('Calidad-Precio')
plt.ylabel('Frecuencia')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 3. Distribución de Innovación
innovacion_counts = data['Innovación'].value_counts()
plt.figure(figsize=(8, 6))

num_colors = len(innovacion_counts)
colors = plt.cm.coolwarm(np.linspace(0, 1, num_colors))

plt.pie(innovacion_counts, labels=innovacion_counts.index, autopct='%1.1f%%', startangle=140, colors=colors) # Use the generated colors
plt.title('Percepción de Innovación del Producto Xiaomi')
plt.axis('equal')
plt.tight_layout()
plt.show()

# 4. Probabilidad de Recomendación
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Probabilidad de Recomendación', palette='cubehelix')
plt.title('Probabilidad de Recomendación del Producto Xiaomi')
plt.xlabel('Probabilidad de Recomendación')
plt.ylabel('Frecuencia')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 5. Comparación de Aspectos Favoritos y Menos Favoritos
favoritos_counts = data['Aspecto Favorito'].value_counts()
menos_favoritos_counts = data['Aspecto Menos Favorito'].value_counts()

plt.figure(figsize=(12, 6))
favoritos_counts.plot(kind='bar', color='blue', alpha=0.6, label='Favoritos')
menos_favoritos_counts.plot(kind='bar', color='red', alpha=0.6, label='Menos Favoritos')
plt.title('Comparación de Aspectos Favoritos y Menos Favoritos del Producto Xiaomi')
plt.xlabel('Aspectos')
plt.ylabel('Cantidad de Respuestas')
plt.legend()
plt.tight_layout()
plt.show()

# 6. Relación entre la experiencia con Xiaomi y la calidad percibida
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Ocupación', palette='Set2')
plt.title('Distribución de la Ocupación de los Encuestados')
plt.xlabel('Ocupación')
plt.ylabel('Frecuencia')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

app = dash.Dash(__name__)

# Layout del dashboard
app.layout = html.Div([
    html.H1("Dashboard de Encuesta Xiaomi", style={'text-align': 'center'}),

    dcc.Slider(
        id='edad-slider',
        min=0,
        max=len(data['Rango de Edad'].unique()) - 1,
        step=1,
        marks={i: rango for i, rango in enumerate(data['Rango de Edad'].unique())},
        value=0,
        tooltip={"placement": "bottom", "always_visible": True}
    ),

    dcc.Graph(id='calidad-graph'),
    dcc.Graph(id='calidad-precio-graph'),
    dcc.Graph(id='innovacion-graph'),

    html.Br(),

    dcc.Dropdown(
        id='ocupacion-dropdown',
        options=[{'label': ocupacion, 'value': ocupacion} for ocupacion in data['Ocupación'].unique()],
        value=data['Ocupación'].unique()[0],
        multi=False,
        style={"width": "50%"}
    ),
    dcc.Graph(id='ocupacion-calidad-graph')
])

# Callback para actualizar los gráficos basados en el slider de edad
@app.callback(
    [Output('calidad-graph', 'figure'),
     Output('calidad-precio-graph', 'figure'),
     Output('innovacion-graph', 'figure')],
    [Input('edad-slider', 'value')]
)
def update_graphs(edad_value):
    # Filtrar los datos según la edad seleccionada
    rango_edad_seleccionado = data['Rango de Edad'].unique()[edad_value]
    data_filtrada = data[data['Rango de Edad'] == rango_edad_seleccionado]

    # Gráfico de Calidad
    calidad_counts = data_filtrada['Calidad'].value_counts()
    fig_calidad = px.pie(names=calidad_counts.index, values=calidad_counts, title="Evaluación de la Calidad")

    # Gráfico de Relación Calidad-Precio
    calidad_precio_counts = data_filtrada['Calidad-Precio'].value_counts()
    fig_calidad_precio = px.bar(x=calidad_precio_counts.index, y=calidad_precio_counts, title="Relación Calidad-Precio")

    # Gráfico de Innovación
    innovacion_counts = data_filtrada['Innovación'].value_counts()
    fig_innovacion = px.pie(names=innovacion_counts.index, values=innovacion_counts, title="Percepción de Innovación")

    return fig_calidad, fig_calidad_precio, fig_innovacion

# Callback para actualizar el gráfico basado en el dropdown de ocupación
@app.callback(
    Output('ocupacion-calidad-graph', 'figure'),
    [Input('ocupacion-dropdown', 'value')]
)
def update_ocupacion_graph(ocupacion_value):
    # Filtrar los datos según la ocupación seleccionada
    data_filtrada = data[data['Ocupación'] == ocupacion_value]

    # Gráfico de Calidad por Ocupación
    calidad_counts = data_filtrada['Calidad'].value_counts()
    fig_ocupacion_calidad = px.bar(x=calidad_counts.index, y=calidad_counts, title=f"Evaluación de la Calidad para {ocupacion_value}")

    return fig_ocupacion_calidad

# Ejecutar la aplicación
if __name__ == '__main__':
    app.run_server(host='0.0.0.0', port=8050, debug=True)
